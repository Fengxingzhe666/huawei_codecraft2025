CMake-disk_partition_time3noinsert.zip
得分927852.63，用时121644ms
CMake-disk_partition202503151545_backup.zip
得分19808840.04，用时118108ms
CMake-disk_partition202503151726_backup.zip
得分19691180.38，用时140205ms
CMake-disk_partition202503192031_backup.zip
这一版本根据预处理信息优化了写逻辑的分区长度，优化了当目标距离小于等于4时，尽可能地采取连读地策略而不是pass过去读
得分23124246.78，用时145168ms
CMake-disk_partition202503201255_backup.zip
这一版本新增逻辑，在pendingRequest的长度大于阈值，且时间片%时间间隔==0时，进行一次特殊跳跃，所有硬盘磁头jump至最近的请求数大于阈值的位置
得分23926583.79，用时142138ms
CMake-disk_partition202503201633_backup.zip
这一版本新增了对每个存储单元位置的请求的scores之和进行计算，计算d值时跳过scores为0的存储单元（跳过有请求但没得分的位置）
得分24094314.52，用时197190ms
CMake-disk_partition202503221118_backup.zip
这一版本新增了对写逻辑的分区逻辑的优化，修复了DISK.hpp中关于寻找连续空闲位置进行分区的bug，该bug导致某些tag始终得不到应有的分区。修改了暴力写入的函数，由从左往右改为从右往左。修改了计算f(x)的函数func()将得分的计算改为使用int型变量
得分：27119196.64，用时202497ms
CMake-disk_partition20250324_backup
这一版试了一个逻辑修改，在特殊时间片的时候，只选择硬盘1~7进行jump操作
得分：27312201.32，用时126227ms
CMake-disk_partition202503252236_backup
此版本进行了时间复杂度的优化，在DISK类中新增变量d，在delete_act()、read_act()、pass_head()、jump()、push_Request_in()、pop_Request_out()、clear_request_id()这些函数中进行维护，并新增函数check_d_at_time_start()在时间片开始时调用，维护d值。在get_nearest_disk()函数中不再调用update_d()函数计算d值，而是直接访问成员变量d。这个版本的读逻辑是在特殊时间片随机选择一个有热tag分区但不在热tag分区的磁头进行jump操作。
得分：26470656.89，用时：73683ms


CMake-disk_partition_202503271625_时间40得分2838w.zip
这个版本的读逻辑是special_jump，每隔TIME_INTERVAL（40）个时间片（即特殊时间片）执行一次特殊跳跃，调用read_most()分别计算执行跳跃和不执行跳跃的得分，如果得分有增益就跳反之不跳。写逻辑大改，现在以object为单位进行写入（替代之前以block为单位），暴力写入时也将优先寻找size个连续空闲位置进行写入。

CMake-disk_partition202503272258_解决分区分割的bug_本地得分2875w.zip
这个版本的读逻辑是check_at_hot_tag，在每个时间片进行检测，需要至少两个磁头分别位于热tag分区和次热tag分区，如果有不满足的就让ex值最小的磁头pass或jump至热分区或次热分区的起点（ex是当前磁头所在tag分区的req_tag[tag]值，即该tag当前时间片存在的读请求个数），在pass/jump之前还要调用两次read_most()计算增益，仅当增益为正时才pass/jump。写逻辑这个版本新增（并且解决了众多bug）了完整的框图功能，即除了以object为单位写入以外，在创建小分区也失败时先遍历一遍table，如果能找到一个分区右侧连续小分区长度（SMALL_PARTITION_LENGTH=50）个位置均空闲，就把这个分区右侧的这些空间分割出去，分割给需要的tag做小分区。

CMake-disk_partition202503280957_时间20得分2858w.zip
这个版本的读逻辑是special_jump，每隔TIME_INTERVAL（40）个时间片（即特殊时间片）执行一次特殊跳跃，调用read_most()分别计算执行跳跃和不执行跳跃的得分，如果得分有增益就跳反之不跳。写逻辑同版本“CMake-disk_partition202503272258_解决分区分割的bug_本地得分2875w.zip”

CMake-disk_partition_special_jump_500,20,7,tag-object.zip（当前最优版本）
这个版本的读逻辑是special_jump，写逻辑使得分区空间没有连续size个空闲，但是余量大于等于size时，会将这个object拆散写入该分区，同时解决了brute_write()函数一个潜在的判断索引是否位于某个分区时的bug。500，20，7是special_jump()的三个参数。
得分：26160687.55，用时175563ms